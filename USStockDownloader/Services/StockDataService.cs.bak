using System.Net.Http;
using System.Text.Json;
using USStockDownloader.Models;
using Microsoft.Extensions.Logging;
using CsvHelper;
using System.Globalization;
using CsvHelper.Configuration;
using USStockDownloader.Exceptions;

namespace USStockDownloader.Services;

public class StockDataService : IStockDataService
{
    private readonly HttpClient _httpClient;
    private readonly ILogger<StockDataService> _logger;

    public StockDataService(HttpClient httpClient, ILogger<StockDataService> logger)
    {
        _httpClient = httpClient;
        _httpClient.DefaultRequestHeaders.Add("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36");
        _logger = logger;
    }

    public async Task<List<StockData>> GetStockDataAsync(string symbol, DateTime startDate, DateTime endDate)
    {
        var unixStartTime = ((DateTimeOffset)startDate).ToUnixTimeSeconds();
        var unixEndTime = ((DateTimeOffset)endDate).ToUnixTimeSeconds();
        var url = $"https://query1.finance.yahoo.com/v8/finance/chart/{symbol}?period1={unixStartTime}&period2={unixEndTime}&interval=1d";

        try
        {
            var response = await _httpClient.GetAsync(url);
            response.EnsureSuccessStatusCode();

            var jsonString = await response.Content.ReadAsStringAsync();
            var jsonDocument = JsonDocument.Parse(jsonString);
            var root = jsonDocument.RootElement;

            if (!root.TryGetProperty("chart", out var chart) ||
                !chart.TryGetProperty("result", out var result) ||
                result.GetArrayLength() == 0)
            {
                _logger.LogError("Invalid JSON structure for symbol {Symbol}", symbol);
                throw new Exception($"Invalid JSON structure for symbol {symbol}");
            }

            var data = result[0];
            if (!data.TryGetProperty("timestamp", out var timestamps) ||
                !data.TryGetProperty("indicators", out var indicators) ||
                !indicators.TryGetProperty("quote", out var quote) ||
                quote.GetArrayLength() == 0)
            {
                _logger.LogError("Missing required data for symbol {Symbol}", symbol);
                throw new Exception($"Missing required data for symbol {symbol}");
            }

            var quoteData = quote[0];
            var timestampArray = timestamps.EnumerateArray().Select(t => DateTimeOffset.FromUnixTimeSeconds(t.GetInt64()).DateTime).ToArray();
            var opens = quoteData.GetProperty("open").EnumerateArray().Select(v => (double)v.GetDecimal()).ToArray();
            var highs = quoteData.GetProperty("high").EnumerateArray().Select(v => (double)v.GetDecimal()).ToArray();
            var lows = quoteData.GetProperty("low").EnumerateArray().Select(v => (double)v.GetDecimal()).ToArray();
            var closes = quoteData.GetProperty("close").EnumerateArray().Select(v => (double)v.GetDecimal()).ToArray();
            var volumes = quoteData.GetProperty("volume").EnumerateArray().Select(v => v.GetInt64()).ToArray();

            var stockDataList = new List<StockData>();
            for (int i = 0; i < timestampArray.Length; i++)
            {
                stockDataList.Add(new StockData
                {
                    Symbol = symbol,
                    Date = timestampArray[i],
                    Open = opens[i],
                    High = highs[i],
                    Low = lows[i],
                    Close = closes[i],
                    Volume = volumes[i]
                });
            }

            _logger.LogInformation("Successfully fetched {Count} data points for {Symbol}", stockDataList.Count, symbol);
            return stockDataList;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to fetch data for symbol {Symbol}", symbol);
            throw new StockDataException(
                $"Failed to fetch data from Yahoo Finance API: {ex.Message}",
                symbol,
                startDate,
                endDate,
                "API_REQUEST_ERROR",
                ex);
        }
    }

    public async Task SaveToCsvAsync(string symbol, List<StockData> data, string outputPath)
    {
        var filePath = Path.Combine(outputPath, $"{symbol}.csv");
        var existingData = new List<StockData>();

        if (File.Exists(filePath))
        {
            try
            {
                using var reader = new StreamReader(filePath);
                using var csv = new CsvReader(reader, CultureInfo.InvariantCulture);
                csv.Context.RegisterClassMap<StockDataMap>();
                existingData = csv.GetRecords<StockData>().ToList();
                _logger.LogInformation("Loaded {Count} existing records from {File}", existingData.Count, filePath);
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "Failed to read existing CSV file for {Symbol}. Creating new file.", symbol);
            }
        }

        var mergedData = existingData
            .Concat(data)
            .GroupBy(d => d.DateNumber)
            .Select(g => g.First())
            .OrderByDescending(d => d.DateNumber)
            .ToList();

        _logger.LogInformation("Merged data contains {Count} records for {Symbol}", mergedData.Count, symbol);

        var config = new CsvConfiguration(CultureInfo.InvariantCulture)
        {
            ShouldQuote = _ => false
        };

        try
        {
            using var writer = new StreamWriter(filePath, false);
            using var csv = new CsvWriter(writer, config);
            csv.Context.RegisterClassMap<StockDataMap>();
            await csv.WriteRecordsAsync(mergedData);
            _logger.LogInformation("Successfully saved data to {File}", filePath);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to save CSV file for {Symbol}", symbol);
            throw new StockDataException(
                $"Failed to write CSV file: {ex.Message}",
                symbol,
                "CSV_WRITE_ERROR",
                ex);
        }
    }
}
